<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Modern Blog Website</title>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;700&display=swap');

    * {
      box-sizing: border-box;
    }

    body {
      font-family: 'Poppins', sans-serif;
      margin: 0;
      background: #f0f4f8;
      color: #333;
      transition: background-color 0.3s, color 0.3s;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }
    body.dark {
      background: #121212;
      color: #eee;
    }

    header {
      background: #4a90e2;
      color: white;
      padding: 20px 40px;
      text-align: center;
      position: sticky;
      top: 0;
      box-shadow: 0 4px 8px rgb(74 144 226 / 0.4);
      z-index: 1000;
    }
    header h1 {
      margin: 0;
      font-weight: 700;
      letter-spacing: 2px;
    }
    header button#darkToggle {
      position: fixed;
      top: 20px;
      right: 20px;
      background: transparent;
      border: 2px solid white;
      border-radius: 30px;
      padding: 8px 16px;
      font-weight: 700;
      color: white;
      cursor: pointer;
      transition: background-color 0.3s, color 0.3s;
    }
    body.dark header button#darkToggle {
      border-color: #4a90e2;
      color: #4a90e2;
      background-color: white;
    }

    main {
      flex: 1;
      max-width: 900px;
      margin: 40px auto;
      padding: 0 20px;
      width: 100%;
    }

    /* Hero Section */
    #hero {
      background: url('https://images.unsplash.com/photo-1507525428034-b723cf961d3e?auto=format&fit=crop&w=1470&q=80') center/cover no-repeat;
      border-radius: 12px;
      color: white;
      text-align: center;
      padding: 120px 20px 80px;
      box-shadow: inset 0 0 0 2000px rgba(0,0,0,0.4);
      margin-bottom: 40px;
      position: relative;
      overflow: hidden;
    }
    #hero h2 {
      font-size: 3rem;
      margin-bottom: 10px;
      letter-spacing: 3px;
      animation: fadeInUp 1s ease forwards;
      opacity: 0;
      transform: translateY(20px);
    }
    #hero p {
      font-size: 1.3rem;
      margin-bottom: 30px;
      opacity: 0;
      animation: fadeInUp 1.3s ease forwards;
      animation-delay: 0.3s;
      transform: translateY(20px);
    }
    #hero button {
      font-size: 1rem;
      padding: 12px 30px;
      border: none;
      border-radius: 30px;
      cursor: pointer;
      background: #ff6b6b;
      color: white;
      font-weight: 700;
      box-shadow: 0 5px 15px rgba(255,107,107,0.5);
      transition: background-color 0.3s;
    }
    #hero button:hover {
      background: #ff5252;
    }

    @keyframes fadeInUp {
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    /* Forms container */
    #authForms {
      background: white;
      padding: 30px;
      border-radius: 12px;
      box-shadow: 0 8px 20px rgba(0,0,0,0.1);
      max-width: 450px;
      margin: 0 auto;
      display: none;
    }
    #authForms.active {
      display: block;
    }

    h3 {
      margin-top: 0;
      margin-bottom: 20px;
      font-weight: 600;
      color: #444;
    }

    form {
      display: flex;
      flex-direction: column;
      gap: 15px;
    }
    input, select, textarea {
      padding: 12px 15px;
      font-size: 1rem;
      border-radius: 8px;
      border: 1.8px solid #ccc;
      transition: border-color 0.3s;
      font-family: 'Poppins', sans-serif;
    }
    input:focus, textarea:focus, select:focus {
      outline: none;
      border-color: #4a90e2;
    }
    textarea {
      resize: vertical;
      min-height: 100px;
    }

    button[type="submit"], button.logoutBtn {
      background: #4a90e2;
      color: white;
      font-weight: 600;
      border: none;
      padding: 14px 20px;
      border-radius: 30px;
      cursor: pointer;
      transition: background-color 0.3s;
      box-shadow: 0 5px 15px rgba(74,144,226,0.5);
    }
    button[type="submit"]:hover, button.logoutBtn:hover {
      background: #357ABD;
    }

    .links {
      font-size: 0.9rem;
      text-align: center;
      margin-top: 15px;
    }
    .links a {
      color: #4a90e2;
      cursor: pointer;
      text-decoration: none;
      margin: 0 6px;
      font-weight: 600;
    }
    .links a:hover {
      text-decoration: underline;
    }

    .error {
      color: #ff4d4d;
      font-size: 0.9rem;
      text-align: center;
      margin-top: -8px;
      margin-bottom: 10px;
    }
    .success {
      color: green;
      text-align: center;
      margin-top: -8px;
      margin-bottom: 10px;
    }

    /* Blog Section */
    #blogSection {
      max-width: 900px;
      margin: 0 auto;
      padding: 20px;
      display: none;
      background: white;
      border-radius: 12px;
      box-shadow: 0 8px 30px rgba(0,0,0,0.1);
    }
    #blogSection h3 {
      text-align: center;
      margin-top: 0;
      margin-bottom: 20px;
    }
    #blogSection button.logoutBtn {
      margin-bottom: 20px;
      float: right;
    }

    form#postForm {
      display: flex;
      flex-direction: column;
      gap: 12px;
      margin-bottom: 30px;
    }
    input#searchInput {
      margin-bottom: 15px;
      padding: 10px 15px;
      font-size: 1rem;
      border-radius: 8px;
      border: 1.8px solid #ccc;
      width: 100%;
    }

    .blog-post {
      background: #f9fafb;
      border-radius: 10px;
      padding: 15px 20px;
      margin-bottom: 18px;
      box-shadow: 0 3px 6px rgba(0,0,0,0.07);
      transition: transform 0.2s;
    }
    .blog-post:hover {
      transform: translateY(-4px);
      box-shadow: 0 8px 15px rgba(0,0,0,0.1);
    }
    .blog-post h4 {
      margin: 0 0 8px;
    }
    .blog-post img {
      max-width: 100%;
      border-radius: 8px;
      margin-bottom: 12px;
    }
    .blog-post small {
      color: #777;
    }
    .blog-post button.likeBtn {
      background: transparent;
      border: none;
      cursor: pointer;
      color: #ff5252;
      font-size: 1.1rem;
      font-weight: 700;
      margin-top: 8px;
    }

    #myPosts {
      margin-top: 30px;
    }
  </style>
</head>
<body>
  <header>
    <h1>🌟 MyBlogSpace 🌟</h1>
    <button id="darkToggle" aria-label="Toggle Dark Mode">🌓</button>
  </header>

  <main>
    <!-- Hero Section -->
    <section id="hero" aria-label="Welcome to MyBlogSpace">
      <h2>Welcome to MyBlogSpace</h2>
      <p>Your place to share stories, ideas, and moments.</p>
      <button onclick="showRegister()">Get Started</button>
    </section>

    <!-- Authentication Forms -->
    <section id="authForms" aria-live="polite">
      <!-- Register Form -->
      <div id="registerForm" class="active">
        <h3>Create Account</h3>
        <form onsubmit="register(event)" novalidate>
          <input type="text" id="regName" placeholder="Name" required aria-required="true" />
          <input type="email" id="regEmail" placeholder="Email" required aria-required="true" />
          <input type="password" id="regPassword" placeholder="Password" required aria-required="true" />
          <button type="submit">Register</button>
        </form>
        <p class="error" id="regError"></p>
        <p class="links">
          Already have an account?
          <a href="#" onclick="showLogin()">Login</a>
        </p>
      </div>

      <!-- Login Form -->
      <div id="loginForm" style="display: none;">
        <h3>Login</h3>
        <form onsubmit="login(event)" novalidate>
          <input type="email" id="loginEmail" placeholder="Email" required aria-required="true" />
          <input type="password" id="loginPassword" placeholder="Password" required aria-required="true" />
          <button type="submit">Login</button>
        </form>
        <p class="error" id="loginError"></p>
        <p class="links">
          Don't have an account?
          <a href="#" onclick="showRegister()">Register</a> |
          <a href="#" onclick="showForgotPassword()">Forgot Password?</a>
        </p>
      </div>

      <!-- Forgot Password Form -->
      <div id="forgotPasswordForm" style="display: none;">
        <h3>Reset Password</h3>
        <form onsubmit="resetPassword(event)" novalidate>
          <input
            type="email"
            id="resetEmail"
            placeholder="Your registered email"
            required aria-required="true"
          />
          <input
            type="password"
            id="newPassword"
            placeholder="New Password"
            required aria-required="true"
          />
          <input
            type="password"
            id="confirmPassword"
            placeholder="Confirm Password"
            required aria-required="true"
          />
          <button type="submit">Reset Password</button>
        </form>
        <p class="error" id="resetError"></p>
        <p class="success" id="resetSuccess" style="display:none;">
          Password updated successfully!
        </p>
        <p class="links"><a href="#" onclick="showLogin()">Back to Login</a></p>
      </div>
    </section>

    <!-- Blog Section -->
    <section id="blogSection" aria-label="Blog posts and post creation">
      <h3>Welcome to Your Blog</h3>
      <button class="logoutBtn" onclick="logout()">Logout</button>

      <form id="postForm" aria-label="Add blog post">
        <input
          type="text"
          id="title"
          placeholder="Blog Title"
          maxlength="50"
          required
          aria-required="true"
        />
        <textarea
          id="content"
          placeholder="Write your blog..."
          maxlength="500"
          required
          aria-required="true"
        ></textarea>
        <label>
          Upload Image (optional):
          <input type="file" id="imageUpload" accept="image/*" aria-label="Upload an image" />
        </label>
        <select id="category" aria-label="Select blog category">
          <option value="General">General</option>
          <option value="Tech">Tech</option>
          <option value="Food">Food</option>
          <option value="Travel">Travel</option>
        </select>
        <button type="submit">Add Post</button>
        <p class="error" id="formError"></p>
      </form>

      <input
        type="text"
        id="searchInput"
        placeholder="Search posts..."
        onkeyup="renderPosts()"
        aria-label="Search blog posts"
      />
      <div id="blogList" role="list"></div>

      <button onclick="showMyPosts()" style="margin-top: 20px;">
        Show My Posts
      </button>
      <div id="myPosts"></div>
    </section>
  </main>

  <script>
    // DOM elements
    const registerForm = document.getElementById("registerForm");
    const loginForm = document.getElementById("loginForm");
    const forgotPasswordForm = document.getElementById("forgotPasswordForm");
    const authForms = document.getElementById("authForms");
    const blogSection = document.getElementById("blogSection");
    const heroSection = document.getElementById("hero");

    // Show Register form
    function showRegister() {
      authForms.classList.add("active");
      registerForm.style.display = "block";
      loginForm.style.display = "none";
      forgotPasswordForm.style.display = "none";
      blogSection.style.display = "none";
      heroSection.style.display = "none";
      clearErrors();
    }

    // Show Login form
    function showLogin() {
      authForms.classList.add("active");
      registerForm.style.display = "none";
      loginForm.style.display = "block";
      forgotPasswordForm.style.display = "none";
      blogSection.style.display = "none";
      heroSection.style.display = "none";
      clearErrors();
    }

    // Show Forgot Password form
    function showForgotPassword() {
      authForms.classList.add("active");
      registerForm.style.display = "none";
      loginForm.style.display = "none";
      forgotPasswordForm.style.display = "block";
      blogSection.style.display = "none";
      heroSection.style.display = "none";
      clearErrors();
      document.getElementById("resetSuccess").style.display = "none";
    }

    // Show Blog Section after login
    function showBlog() {
      authForms.classList.remove("active");
      blogSection.style.display = "block";
      heroSection.style.display = "none";
      clearErrors();
      renderPosts();
    }

    // Show Hero Section for not logged in users
    function showHero() {
      authForms.classList.remove("active");
      blogSection.style.display = "none";
      heroSection.style.display = "block";
    }

    function clearErrors() {
      document.getElementById("regError").textContent = "";
      document.getElementById("loginError").textContent = "";
      document.getElementById("resetError").textContent = "";
      document.getElementById("formError").textContent = "";
    }

    // LocalStorage helpers
    function getUsers() {
      return JSON.parse(localStorage.getItem("users") || "[]");
    }

    function getCurrentUser() {
      return JSON.parse(localStorage.getItem("currentUser"));
    }

    // Register new user
    function register(e) {
      e.preventDefault();
      const name = document.getElementById("regName").value.trim();
      const email = document.getElementById("regEmail").value.trim();
      const password = document.getElementById("regPassword").value.trim();
      const users = getUsers();
      const regError = document.getElementById("regError");

      if (users.some((u) => u.email === email)) {
        regError.textContent = "Email already registered!";
        return;
      }

      if (password.length < 6) {
        regError.textContent = "Password should be at least 6 characters.";
        return;
      }

      users.push({ name, email, password });
      localStorage.setItem("users", JSON.stringify(users));
      regError.style.color = "green";
      regError.textContent = "Registered successfully! Please login.";
      setTimeout(() => {
        regError.textContent = "";
        regError.style.color = "red";
        showLogin();
      }, 2000);
    }

    // Login user
    function login(e) {
      e.preventDefault();
      const email = document.getElementById("loginEmail").value.trim();
      const password = document.getElementById("loginPassword").value.trim();
      const users = getUsers();
      const loginError = document.getElementById("loginError");

      const user = users.find((u) => u.email === email && u.password === password);
      if (!user) {
        loginError.textContent = "Invalid email or password!";
        return;
      }
      localStorage.setItem("currentUser", JSON.stringify(user));
      loginError.textContent = "";
      showBlog();
    }

    // Reset Password
    function resetPassword(e) {
      e.preventDefault();
      const email = document.getElementById("resetEmail").value.trim();
      const newPassword = document.getElementById("newPassword").value.trim();
      const confirmPassword = document.getElementById("confirmPassword").value.trim();
      const users = getUsers();
      const resetError = document.getElementById("resetError");
      const resetSuccess = document.getElementById("resetSuccess");

      if (newPassword.length < 6) {
        resetError.textContent = "Password should be at least 6 characters.";
        resetSuccess.style.display = "none";
        return;
      }
      if (newPassword !== confirmPassword) {
        resetError.textContent = "Passwords do not match!";
        resetSuccess.style.display = "none";
        return;
      }

      const userIndex = users.findIndex((u) => u.email === email);
      if (userIndex === -1) {
        resetError.textContent = "Email not found!";
        resetSuccess.style.display = "none";
        return;
      }
      users[userIndex].password = newPassword;
      localStorage.setItem("users", JSON.stringify(users));
      resetError.textContent = "";
      resetSuccess.style.display = "block";

      setTimeout(() => {
        resetSuccess.style.display = "none";
        showLogin();
      }, 3000);
    }

    // Logout
    function logout() {
      localStorage.removeItem("currentUser");
      showHero();
    }

    // Posts
    function getPosts() {
      return JSON.parse(localStorage.getItem("posts") || "[]");
    }

    function savePosts(posts) {
      localStorage.setItem("posts", JSON.stringify(posts));
    }

    // Add post with image (converted to base64)
    document.getElementById("postForm").addEventListener("submit", function (e) {
      e.preventDefault();
      const title = document.getElementById("title").value.trim();
      const content = document.getElementById("content").value.trim();
      const category = document.getElementById("category").value;
      const formError = document.getElementById("formError");
      const user = getCurrentUser();

      if (!title || !content) {
        formError.textContent = "Title and Content are required.";
        return;
      }
      formError.textContent = "";

      const imageFile = document.getElementById("imageUpload").files[0];

      if (imageFile) {
        const reader = new FileReader();
        reader.onload = function () {
          const posts = getPosts();
          posts.push({
            id: Date.now(),
            title,
            content,
            category,
            image: reader.result,
            authorEmail: user.email,
            likes: 0,
          });
          savePosts(posts);
          renderPosts();
          e.target.reset();
        };
        reader.readAsDataURL(imageFile);
      } else {
        const posts = getPosts();
        posts.push({
          id: Date.now(),
          title,
          content,
          category,
          image: null,
          authorEmail: user.email,
          likes: 0,
        });
        savePosts(posts);
        renderPosts();
        e.target.reset();
      }
    });

    // Render posts with search and filter support
    function renderPosts() {
      const posts = getPosts();
      const searchText = document.getElementById("searchInput").value.toLowerCase();
      const blogList = document.getElementById("blogList");
      blogList.innerHTML = "";

      const filteredPosts = posts.filter((post) => {
        return (
          post.title.toLowerCase().includes(searchText) ||
          post.content.toLowerCase().includes(searchText) ||
          post.category.toLowerCase().includes(searchText)
        );
      });

      if (filteredPosts.length === 0) {
        blogList.innerHTML = "<p>No posts found.</p>";
        return;
      }

      filteredPosts.forEach((post) => {
        blogList.innerHTML += `
          <div class="blog-post" role="listitem" tabindex="0">
            <h4>${post.title}</h4>
            ${post.image ? `<img src="${post.image}" alt="Blog image for ${post.title}" />` : ""}
            <p>${post.content}</p>
            <small>Category: ${post.category}</small><br/>
            <button class="likeBtn" aria-label="Like post titled ${post.title}" onclick="likePost(${post.id})">❤️ ${post.likes}</button>
          </div>
        `;
      });
    }

    // Like post
    function likePost(id) {
      const posts = getPosts();
      const post = posts.find((p) => p.id === id);
      if (post) {
        post.likes = (post.likes || 0) + 1;
        savePosts(posts);
        renderPosts();
      }
    }

    // Show only current user posts
    function showMyPosts() {
      const posts = getPosts();
      const user = getCurrentUser();
      const myPostsDiv = document.getElementById("myPosts");
      myPostsDiv.innerHTML = "<h3>My Posts</h3>";

      if (!user) {
        myPostsDiv.innerHTML += "<p>Please login to see your posts.</p>";
        return;
      }

      const userPosts = posts.filter((post) => post.authorEmail === user.email);

      if (userPosts.length === 0) {
        myPostsDiv.innerHTML += "<p>You have not added any posts yet.</p>";
        return;
      }

      userPosts.forEach((post) => {
        myPostsDiv.innerHTML += `
          <div class="blog-post" tabindex="0">
            <h4>${post.title}</h4>
            ${post.image ? `<img src="${post.image}" alt="Blog image for ${post.title}" />` : ""}
            <p>${post.content}</p>
            <small>Category: ${post.category}</small>
          </div>
        `;
      });
    }

    // Dark mode toggle
    document.getElementById("darkToggle").addEventListener("click", () => {
      document.body.classList.toggle("dark");
      localStorage.setItem(
        "darkMode",
        document.body.classList.contains("dark") ? "true" : "false"
      );
    });

    // Load dark mode preference
    window.onload = () => {
      const darkMode = localStorage.getItem("darkMode");
      if (darkMode === "true") {
        document.body.classList.add("dark");
      }

      const currentUser = getCurrentUser();
      if (currentUser) {
        showBlog();
      } else {
        showHero();
      }
    };
  </script>
</body>
</html>
